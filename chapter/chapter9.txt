1、概念

为什么要有结构体？

因为在实际问题中，一组数据往往有很多种不同的数据类型。例如，登记学生的信息，可能需要用到 char型的姓名，int型或 char型的学号，int型的年龄，char型的性别，float型的成绩。又例如，对于记录一本书，需要 char型的书名，char型的作者名，float型的价格。在这些情况下，使用简单的基本数据类型甚至是数组都是很困难的。而结构体（类似Pascal中的“记录”），则可以有效的解决这个问题。
结构体本质上还是一种数据类型，但它可以包括若干个“成员”，每个成员的类型可以相同也可以不同，也可以是基本数据类型或者又是一个构造类型。
结构体的优点：结构体不仅可以记录不同类型的数据，而且使得数据结构是“高内聚，低耦合”的，更利于程序的阅读理解和移植，而且结构体的存储方式可以提高CPU对内存的访问速度。

结构声明（structure declaration）

结构声明（也见有称做定义一个结构体）是描述结构如何组合的主要方法。
一般形式是：
struct 结构名{
成员列表
};
struct关键词表示接下来是一个结构。
如声明一个学生的结构：

struct Student{         //声明结构体
    char name[20];      //姓名
    int num;            //学号
    float score;        //成绩
};
上面的声明描述了一个包含三个不同类型的成员的结构，但它还没创建一个实际的数据对象，类似C++中的模板。每个成员变量都用自己的声明来描述，以分号结束。花括号之后的分号表示结构声明结束。结构声明可以放在函数外（此时为全局结构体，类似全局变量，在它之后声明的所有函数都可以使用），也可以放在函数内（此时为局部结构体，类似局部变量，只能放在该函数内使用，如果与全局结构体同名，则会暂时屏蔽全局结构体）。

要定义结构变量，则一般形式是：
struct 结构体名 结构体变量名;
如：

struct Student stu1;    //定义结构体变量

