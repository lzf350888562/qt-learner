7.1 C语言函数
	(1)一个C程序由一个或多个程序模块组成，每一个程序模块作为一个源程序文件。对较大的程序，一般不希望把所有内容全放在一个文件中，而是将它们分别放在若干个源文件中，由若干个源程序文件组成一个C程序。这样便于分别编写、分别编译，提高调试效率。一个源程序文件可以为多个C程序共用。
	(2)一个源程序文件由一个或多个函数以及其他有关内容（如预处理指令、数据声明与定义等）组成。一个源程序文件是一个编译单位，在程序编译时是以源程序文件为单位进行编译的，而不是以函数为单位进行编译的。
	(3)C程序的执行是从main函数开始的，如果在main函数中调用其他函数，在调用后流程返回到main函数，在main函数中结束整个程序的运行。
	(4)所有函数都是平行的，即在定义函数时是分别进行的，是互相独立的。一个函数并不从属于另一个函数，即函数不能嵌套定义。函数间可以互相调用，但不能调用main函数。main函数是被操作系统调用的。
	(5)从用户使用的角度看，函数有两种。
库函数，它是由系统提供的，用户不必自己定义而直接使用它们。应该说明，不同的C语言编译系统提供的库函数的数量和功能会有一些不同，当然许多基本的函数是共同的。
用户自己定义的函数。它是用以解决用户专门需要的函数。
	(6)从函数的形式看，函数分两类。
	①无参函数。无参函数一般用来执行指定的一组操作。无参函数可以带回或不带回函数值，但一般以不带回函数值的居多。
	②有参函数。在调用函数时，主调函数在调用被调用函数时，通过参数向被调用函数传递数据，一般情况下，执行被调用函数时会得到一个函数值，供主调函数使用。
7.2 函数的定义
	C语言要求，在程序中用到的所有函数，必须“先定义，后使用”
	指定函数名字、函数返回值类型、函数实现的功能以及参数的个数与类型，将这些信息通知编译系统。
	指定函数的名字，以便以后按名调用
	指定函数类型，即函数返回值的类型
	指定函数参数的名字和类型，以便在调用函数时向它们传递数据指定函数的功能。这是最重要的，这是在函数体中解决的
	对于库函数程序设计者只需用#include指令把有关的头文件包含到本文件模块中即可。		程序设计者需要在程序中自己定义想用的而库函数并没有提供的函数。
	1.定义无参函数，定义无参函数的一般形式为:
	类型名 函数名()
	{
		函数体
	}
	2.定义有参函数，定义有参函数的一般形式为:
	类型名 函数名(形式参数表列)
	{	
		函数体
	}	
	3.定义空函数，定义空函数的一般形式为:
	类型名	函数名()
	{
	}
	用空函数占一个位置，以后逐步扩充。好处:程序结构清楚，可读性好，扩充新功能方便，对程序结构影响不大。
7.3 函数的调用
	函数调用的一般形式为:函数名（实参表列)
	如调用无参函数，则“实参表列”可以没有，但括号不能省略;如实参表列含多个实参，则各参数间用逗号隔开。
	1.形式参数和实际参数
	在调用有参函数时，主调函数和被调用函数之间有数据传递关系定义函数时函数名后面的变量名称为“形式参数”(简称“形参”)
	主调函数中调用一个函数时，函数名后面参数称为“实际参数”(简称“实参”)，实际参数可以是常量、变量或表达式
	2．实参和形参间的数据传递
在调用函数过程中，系统会把实参的值传递给被调用函数的形参;或者说，形参从实参得到一个值，该值在函数调用期间有效，可以参加被调函数中的运算
	3.函数的返回值
	通常，希望通过函数调用使主调函数能得到一个确定的值，这就是函数的返回值
	2.函数的返回值是通过函数中的return 语句获得的。一个函数中可以有一个以上的return语句，执行到哪一个return语句，哪一个就起作用; return语句后面的括号可以不要。
	3.函数值的类型。应当在定义函数时指定函数值的类型。
	4.在定义函数时指定的函数类型一般应该和 return语句中的表达式类型一致。如果函数值的类型和return语句中表达式的值不一致，则以函数类型为准。
7.4 对被调用函数的声明和函数原型
	在一个函数中调用另一个函数需要具备如下条件:
	(1）被调用函数必须是已经定义的函数（是库函数或用户自己定义的函数)(2)如果使用库函数，应该在本文件开头加相应的#include指令
	(3）如果使用自己定义的函数，而该函数的位置在调用它的函数后面，应该声明
7.5 函数的举例
	输入两个实数，用一个函数求出它们之和。
	解题思路:用add函数实现。首先要定义add函数，它为float型，它应有两个参数，也应为float型。
	特别要注意的是:要对add函数进行声明。
	#include <stdio.h>
	int main()
	{ float add(float x, float y);
	float a,b,c;
	printf("Please enter a and b:");
	scanf("%f ,%f",&a,&b);
	c=add(a,b);
	printf("sum is %f\n",c);
	return O;
	float add(float x,float y)
	{ float z;
	z=x+y;
	return(z);
	}	

7.4 函数的举例


